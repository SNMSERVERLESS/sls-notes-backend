# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: inxocean
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: sls-notes-backend
# "service" is the name of this project. This will also be added to your AWS resource names.
service: sls-notes-backend

plugins:
  - serverless-offline
  # - serverless-domain-manager

custom:
  allowedHeaders:
    - Accept
    - Content-Type
    - Content-Length
    - Authorization
    - X-Amz-Date
    - X-Api-Key
  serverless-offline:
    port: 3000
    host: 0.0.0.0
  # custom-domain:
  #   domainname: test.inxocean.com
  #   stage: ${sls:stage}
  #   certificateName: inxocean.com
  #   createRoute53Record: true

stages:
  default:
    params:
      tableName: "notes-table-${sls:stage}"

provider:
  name: aws
  runtime: nodejs20.x
  region: ap-south-1
  stage: prod
  timeout: 5
  memorySize: 256
  endpointType: regional
  environment:
    TABLE_NAME: ${param:tableName}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [NotesTable, Arn]

functions:
  addNote:
    handler: build/handlers/add.add
    events:
      - http:
          path: /users/{user_id}
          method: post
  updateNote:
    handler: build/handlers/update.update
    events:
      - http:
          path: /users/{user_id}
          method: patch
  getNote:
    handler: build/handlers/note.note
    events:
      - http:
          path: /users/{user_id}
          method: get
  getNotes:
    handler: build/handlers/notes.notes
    events:
      - http:
          path: /users
          method: get
  deleteNote:
    handler: build/handlers/delete.delete
    events:
      - http:
          path: /users/{user_id}
          method: delete

resources:
  Resources:
    NotesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: user_id
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
          - AttributeName: note_id
            AttributeType: S
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${param:tableName}
        GlobalSecondaryIndexes:
        - IndexName: note_id_index
          KeySchema:
            - AttributeName: note_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
